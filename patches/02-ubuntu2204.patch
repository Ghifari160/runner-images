From 9e3e2d37208cb1b75a238645f1d6e1e2782db561 Mon Sep 17 00:00:00 2001
From: GHIFARI160 <ghifari@ghifari160.com>
Date: Tue, 5 Sep 2023 11:46:29 -0500
Subject: [PATCH] Modify ubuntu2204 template

Modify the template to build a Docker image.
---
 images/linux/ubuntu2204.pkr.hcl | 190 +++++++-------------------------
 1 file changed, 41 insertions(+), 149 deletions(-)

diff --git a/images/linux/ubuntu2204.pkr.hcl b/images/linux/ubuntu2204.pkr.hcl
index 0001838..b73a507 100644
--- a/images/linux/ubuntu2204.pkr.hcl
+++ b/images/linux/ubuntu2204.pkr.hcl
@@ -1,44 +1,4 @@
-locals {
-  managed_image_name = var.managed_image_name != "" ? var.managed_image_name : "packer-${var.image_os}-${var.image_version}"
-}
-
-variable "allowed_inbound_ip_addresses" {
-  type    = list(string)
-  default = []
-}
-
-variable "azure_tags" {
-  type    = map(string)
-  default = {}
-}
-
-variable "build_resource_group_name" {
-  type    = string
-  default = "${env("BUILD_RESOURCE_GROUP_NAME")}"
-}
-
-variable "managed_image_name" {
-  type    = string
-  default = ""
-}
-
-variable "client_id" {
-  type    = string
-  default = "${env("ARM_CLIENT_ID")}"
-}
-
-variable "client_secret" {
-  type      = string
-  default   = "${env("ARM_CLIENT_SECRET")}"
-  sensitive = true
-}
-
-variable "client_cert_path" {
-  type      = string
-  default   = "${env("ARM_CLIENT_CERT_PATH")}"
-}
-
-variable "commit_url" {
+variable "commit" {
   type      = string
   default   = ""
 }
@@ -83,104 +43,48 @@ variable "installer_script_folder" {
   default = "/imagegeneration/installers"
 }
 
-variable "install_password" {
-  type  = string
-  default = ""
-}
-
-variable "location" {
-  type    = string
-  default = "${env("ARM_RESOURCE_LOCATION")}"
-}
-
-variable "private_virtual_network_with_public_ip" {
-  type    = bool
-  default = false
-}
-
-variable "managed_image_resource_group_name" {
-  type    = string
-  default = "${env("ARM_RESOURCE_GROUP")}"
-}
-
 variable "run_validation_diskspace" {
   type    = bool
   default = false
 }
 
-variable "subscription_id" {
-  type    = string
-  default = "${env("ARM_SUBSCRIPTION_ID")}"
-}
-
-variable "temp_resource_group_name" {
-  type    = string
-  default = "${env("TEMP_RESOURCE_GROUP_NAME")}"
-}
-
-variable "tenant_id" {
-  type    = string
-  default = "${env("ARM_TENANT_ID")}"
-}
-
-variable "virtual_network_name" {
-  type    = string
-  default = "${env("VNET_NAME")}"
+source "docker" "ubuntu-2204" {
+  image            = "ghifari160/ubuntu:22.04"
+  discard          = false
+  commit           = true
+  pull             = true
+  privileged       = true
+  fix_upload_owner = true
+  container_dir    = "/tmp"
+  volumes = {
+    "/var/run/docker.sock" : "/var/run/docker.sock"
+  }
+  changes = [
+    "ENTRYPOINT /bin/bash",
+    "LABEL org.opencontainers.image.authors=https://github.com/ghifari160",
+    "LABEL org.opencontainers.image.revision=${var.commit}",
+    "LABEL org.opencontainers.image.source=https://github.com/ghifari160/runner-images",
+    "LABEL org.opencontainers.image.title=full-22.04-amd64",
+    "LABEL org.opencontainers.image.url=https://github.com/ghifari160/runner-images",
+    "LABEL org.opencontainers.image.vendor=ghifari160",
+    "LABEL org.opencontainers.image.version=${var.image_version}",
+  ]
 }
 
-variable "virtual_network_resource_group_name" {
-  type    = string
-  default = "${env("VNET_RESOURCE_GROUP")}"
-}
-
-variable "virtual_network_subnet_name" {
-  type    = string
-  default = "${env("VNET_SUBNET")}"
-}
-
-variable "vm_size" {
-  type    = string
-  default = "Standard_D4s_v4"
-}
+build {
+  sources = ["source.docker.ubuntu-2204"]
 
-source "azure-arm" "build_image" {
-  allowed_inbound_ip_addresses           = "${var.allowed_inbound_ip_addresses}"
-  build_resource_group_name              = "${var.build_resource_group_name}"
-  client_id                              = "${var.client_id}"
-  client_secret                          = "${var.client_secret}"
-  client_cert_path                       = "${var.client_cert_path}"
-  image_offer                            = "0001-com-ubuntu-server-jammy"
-  image_publisher                        = "canonical"
-  image_sku                              = "22_04-lts"
-  location                               = "${var.location}"
-  os_disk_size_gb                        = "86"
-  os_type                                = "Linux"
-  private_virtual_network_with_public_ip = "${var.private_virtual_network_with_public_ip}"
-  managed_image_name                     = "${local.managed_image_name}"
-  managed_image_resource_group_name      = "${var.managed_image_resource_group_name}"
-  subscription_id                        = "${var.subscription_id}"
-  temp_resource_group_name               = "${var.temp_resource_group_name}"
-  tenant_id                              = "${var.tenant_id}"
-  virtual_network_name                   = "${var.virtual_network_name}"
-  virtual_network_resource_group_name    = "${var.virtual_network_resource_group_name}"
-  virtual_network_subnet_name            = "${var.virtual_network_subnet_name}"
-  vm_size                                = "${var.vm_size}"
-
-  dynamic "azure_tag" {
-    for_each = var.azure_tags
-    content {
-      name = azure_tag.key
-      value = azure_tag.value
-    }
+  post-processor "docker-tag" {
+    repository = "ghifari160/ubuntu"
+    tags = [
+      "full-22.04",
+      "full-latest",
+    ]
   }
-}
-
-build {
-  sources = ["source.azure-arm.build_image"]
 
   provisioner "shell" {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
-    inline          = ["mkdir ${var.image_folder}", "chmod 777 ${var.image_folder}"]
+    inline          = ["mkdir -p ${var.image_folder}", "chmod 777 ${var.image_folder}"]
   }
 
   provisioner "shell" {
@@ -194,12 +98,6 @@ build {
     scripts          = ["${path.root}/scripts/base/repos.sh"]
   }
 
-  provisioner "shell" {
-    environment_vars = ["DEBIAN_FRONTEND=noninteractive"]
-    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
-    scripts          = ["${path.root}/scripts/base/apt-ubuntu-archive.sh"]
-  }
-
   provisioner "shell" {
     environment_vars = ["DEBIAN_FRONTEND=noninteractive"]
     execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
@@ -311,7 +209,7 @@ build {
                         "${path.root}/scripts/installers/miniconda.sh",
                         "${path.root}/scripts/installers/mono.sh",
                         "${path.root}/scripts/installers/kotlin.sh",
-                        "${path.root}/scripts/installers/mysql.sh",
+                        // "${path.root}/scripts/installers/mysql.sh",
                         "${path.root}/scripts/installers/mssql-cmd-tools.sh",
                         "${path.root}/scripts/installers/sqlpackage.sh",
                         "${path.root}/scripts/installers/nginx.sh",
@@ -320,7 +218,7 @@ build {
                         "${path.root}/scripts/installers/bazel.sh",
                         "${path.root}/scripts/installers/oras-cli.sh",
                         "${path.root}/scripts/installers/php.sh",
-                        "${path.root}/scripts/installers/postgresql.sh",
+                        // "${path.root}/scripts/installers/postgresql.sh",
                         "${path.root}/scripts/installers/pulumi.sh",
                         "${path.root}/scripts/installers/ruby.sh",
                         "${path.root}/scripts/installers/r.sh",
@@ -333,7 +231,7 @@ build {
                         "${path.root}/scripts/installers/vcpkg.sh",
                         "${path.root}/scripts/installers/dpkg-config.sh",
                         "${path.root}/scripts/installers/yq.sh",
-                        "${path.root}/scripts/installers/android.sh",
+                        // "${path.root}/scripts/installers/android.sh",
                         "${path.root}/scripts/installers/pypy.sh",
                         "${path.root}/scripts/installers/python.sh",
                         "${path.root}/scripts/installers/zstd.sh"
@@ -369,12 +267,6 @@ build {
     script          = "${path.root}/scripts/base/snap.sh"
   }
 
-  provisioner "shell" {
-    execute_command   = "/bin/sh -c '{{ .Vars }} {{ .Path }}'"
-    expect_disconnect = true
-    scripts           = ["${path.root}/scripts/base/reboot.sh"]
-  }
-
   provisioner "shell" {
     execute_command     = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
     pause_before        = "1m0s"
@@ -389,7 +281,13 @@ build {
 
   provisioner "shell" {
     environment_vars = ["IMAGE_VERSION=${var.image_version}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
-    inline           = ["pwsh -File ${var.image_folder}/SoftwareReport/SoftwareReport.Generator.ps1 -OutputDirectory ${var.image_folder}", "pwsh -File ${var.image_folder}/tests/RunAll-Tests.ps1 -OutputDirectory ${var.image_folder}"]
+    inline_shebang   = "/bin/bash -e"
+    inline           = [
+                        "source ${var.helper_script_folder}/etc-environment.sh",
+                        "reloadEtcEnvironment",
+                        "pwsh -File ${var.image_folder}/SoftwareReport/SoftwareReport.Generator.ps1 -OutputDirectory ${var.image_folder}",
+                        "pwsh -File ${var.image_folder}/tests/RunAll-Tests.ps1 -OutputDirectory ${var.image_folder}"
+    ]
   }
 
   provisioner "file" {
@@ -424,10 +322,4 @@ build {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
     inline          = ["mkdir -p /etc/vsts", "cp /tmp/ubuntu2204.conf /etc/vsts/machine_instance.conf"]
   }
-
-  provisioner "shell" {
-    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
-    inline          = ["sleep 30", "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
-  }
-
 }
-- 
2.42.0

