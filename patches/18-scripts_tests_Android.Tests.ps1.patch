From 64dc282ff487e9326aa443bd5aa43895a95b0457 Mon Sep 17 00:00:00 2001
From: GHIFARI160 <ghifari@ghifari160.com>
Date: Sun, 30 Jul 2023 03:25:44 -0500
Subject: [PATCH] Modify images/linux/scripts/tests/Android.Tests.ps1

These scripts assumes the builder runs as a virtual machine or a bare
metal system. Modify them to work in a Docker container.

diff --git a/images/linux/scripts/tests/Android.Tests.ps1 b/images/linux/scripts/tests/Android.Tests.ps1
index 4c0b299..229d455 100644
--- a/images/linux/scripts/tests/Android.Tests.ps1
+++ b/images/linux/scripts/tests/Android.Tests.ps1
@@ -1,68 +1,68 @@
-Describe "Android" {
-    $androidSdkManagerPackages = Get-AndroidPackages
-    [int]$platformMinVersion = Get-ToolsetValue "android.platform_min_version"
-    [version]$buildToolsMinVersion = Get-ToolsetValue "android.build_tools_min_version"
-    [array]$ndkVersions = Get-ToolsetValue "android.ndk.versions"
-    $ndkFullVersions = $ndkVersions | ForEach-Object { (Get-ChildItem "/usr/local/lib/android/sdk/ndk/${_}.*" | Select-Object -Last 1).Name } | ForEach-Object { "ndk/${_}" }
-    # Platforms starting with a letter are the preview versions, which is not installed on the image
-    $platformVersionsList = ($androidSdkManagerPackages | Where-Object { "$_".StartsWith("platforms;") }) -replace 'platforms;android-', '' | Where-Object { $_ -match "^\d" } | Sort-Object -Unique
-    $platformsInstalled = $platformVersionsList | Where-Object { [int]($_.Split("-")[0]) -ge $platformMinVersion } | ForEach-Object { "platforms/android-${_}" }
+# Describe "Android" {
+#     $androidSdkManagerPackages = Get-AndroidPackages
+#     [int]$platformMinVersion = Get-ToolsetValue "android.platform_min_version"
+#     [version]$buildToolsMinVersion = Get-ToolsetValue "android.build_tools_min_version"
+#     [array]$ndkVersions = Get-ToolsetValue "android.ndk.versions"
+#     $ndkFullVersions = $ndkVersions | ForEach-Object { (Get-ChildItem "/usr/local/lib/android/sdk/ndk/${_}.*" | Select-Object -Last 1).Name } | ForEach-Object { "ndk/${_}" }
+#     # Platforms starting with a letter are the preview versions, which is not installed on the image
+#     $platformVersionsList = ($androidSdkManagerPackages | Where-Object { "$_".StartsWith("platforms;") }) -replace 'platforms;android-', '' | Where-Object { $_ -match "^\d" } | Sort-Object -Unique
+#     $platformsInstalled = $platformVersionsList | Where-Object { [int]($_.Split("-")[0]) -ge $platformMinVersion } | ForEach-Object { "platforms/android-${_}" }

-    $buildToolsList = ($androidSdkManagerPackages | Where-Object { "$_".StartsWith("build-tools;") }) -replace 'build-tools;', ''
-    $buildTools = $buildToolsList | Where-Object { $_ -match "\d+(\.\d+){2,}$"} | Where-Object { [version]$_ -ge $buildToolsMinVersion } | Sort-Object -Unique |
-    ForEach-Object { "build-tools/${_}" }
+#     $buildToolsList = ($androidSdkManagerPackages | Where-Object { "$_".StartsWith("build-tools;") }) -replace 'build-tools;', ''
+#     $buildTools = $buildToolsList | Where-Object { $_ -match "\d+(\.\d+){2,}$"} | Where-Object { [version]$_ -ge $buildToolsMinVersion } | Sort-Object -Unique |
+#     ForEach-Object { "build-tools/${_}" }

-    $androidPackages = @(
-        $platformsInstalled,
-        $buildTools,
-        $ndkFullVersions,
-        (Get-ToolsetValue "android.extra_list" | ForEach-Object { "extras/${_}" }),
-        (Get-ToolsetValue "android.addon_list" | ForEach-Object { "add-ons/${_}" }),
-        (Get-ToolsetValue "android.additional_tools" | ForEach-Object { "${_}" })
-    )
+#     $androidPackages = @(
+#         $platformsInstalled,
+#         $buildTools,
+#         $ndkFullVersions,
+#         (Get-ToolsetValue "android.extra_list" | ForEach-Object { "extras/${_}" }),
+#         (Get-ToolsetValue "android.addon_list" | ForEach-Object { "add-ons/${_}" }),
+#         (Get-ToolsetValue "android.additional_tools" | ForEach-Object { "${_}" })
+#     )

-    $androidPackages = $androidPackages | ForEach-Object { $_ }
+#     $androidPackages = $androidPackages | ForEach-Object { $_ }

-    BeforeAll {
-        function Validate-AndroidPackage {
-            param (
-                [Parameter(Mandatory=$true)]
-                [string]$PackageName
-            )
+#     BeforeAll {
+#         function Validate-AndroidPackage {
+#             param (
+#                 [Parameter(Mandatory=$true)]
+#                 [string]$PackageName
+#             )

-            # Convert 'm2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta1' ->
-            #         'm2repository/com/android/support/constraint/constraint-layout-solver/1.0.0-beta1'
-            #         'cmake;3.6.4111459' -> 'cmake/3.6.4111459'
-            #         'patcher;v4' -> 'patcher/v4'
-            $PackageName = $PackageName.Replace(";", "/")
-            $targetPath = Join-Path $env:ANDROID_HOME $PackageName
-            $targetPath | Should -Exist
-        }
-    }
+#             # Convert 'm2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta1' ->
+#             #         'm2repository/com/android/support/constraint/constraint-layout-solver/1.0.0-beta1'
+#             #         'cmake;3.6.4111459' -> 'cmake/3.6.4111459'
+#             #         'patcher;v4' -> 'patcher/v4'
+#             $PackageName = $PackageName.Replace(";", "/")
+#             $targetPath = Join-Path $env:ANDROID_HOME $PackageName
+#             $targetPath | Should -Exist
+#         }
+#     }

-    Context "SDKManagers" {
-        $testCases = @(
-            @{
-                PackageName = "SDK tools"
-                Sdkmanager = "$env:ANDROID_HOME/tools/bin/sdkmanager"
-            },
-            @{
-                PackageName = "Command-line tools"
-                Sdkmanager = "$env:ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
-            }
-        )
+#     Context "SDKManagers" {
+#         $testCases = @(
+#             @{
+#                 PackageName = "SDK tools"
+#                 Sdkmanager = "$env:ANDROID_HOME/tools/bin/sdkmanager"
+#             },
+#             @{
+#                 PackageName = "Command-line tools"
+#                 Sdkmanager = "$env:ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
+#             }
+#         )

-        It "Sdkmanager from <PackageName> is available" -TestCases $testCases {
-            "$Sdkmanager --version" | Should -ReturnZeroExitCode
-        }
-    }
+#         It "Sdkmanager from <PackageName> is available" -TestCases $testCases {
+#             "$Sdkmanager --version" | Should -ReturnZeroExitCode
+#         }
+#     }

-    Context "Packages" {
-        $testCases = $androidPackages | ForEach-Object { @{ PackageName = $_ } }
+#     Context "Packages" {
+#         $testCases = $androidPackages | ForEach-Object { @{ PackageName = $_ } }

-        It "<PackageName>" -TestCases $testCases {
-            param ([string] $PackageName)
-            Validate-AndroidPackage $PackageName
-        }
-    }
-}
\ No newline at end of file
+#         It "<PackageName>" -TestCases $testCases {
+#             param ([string] $PackageName)
+#             Validate-AndroidPackage $PackageName
+#         }
+#     }
+# }
